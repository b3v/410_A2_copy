// writing our own shell
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>


// use isatty to see if the input is coming from
// terminal or not

// have myshell call bash for the different programs
// specific to a Linux system;
// this is the easy way out, later we can try implementing it ourselves

#define MAX_ARGS 128

int execute_command(char *command, char *output_file, char *in_out) {
    pid_t pid;
    int status;
    
    // fork a child process for each command
    pid = fork();
    // make sure process ID is non-negative
    if (pid == -1) {
        perror("fork");
        return -1;
    } else if (pid == 0) { // work in child process
        // if input/output redirection is requested
      if (output_file != NULL) {
            int fd = open(output_file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
            if (fd == -1) {
                perror("open");
                exit(EXIT_FAILURE);
            }
            // essentially rewire the file's fd to connect to STDOUT
            if (dup2(fd, STDOUT_FILENO) == -1) {
                perror("dup2");
                exit(EXIT_FAILURE);
            }
            close(fd);
        }
      // Execute the command
      execlp(command, command, NULL);
    } else { // Parent process
        // Wait for the child process to finish
        waitpid(pid, &status, 0);
    }
    return 0;
}

int parse_command_line(){
  // handle pipes |
  // handle background-running shell: &
  // handle I/O redirection >, <, 1>, 2>
  // handle -p and then fork() and exec() tapper executable

  char command_line[1000];
  // pointer to an array that will store our
  // command line arguments
  char *args[MAX_ARGS];
  char *output_file = NULL;
  char *in_out;

  // read the command line with a max buffer size of 1000,
  // where the command line is stdin
  fgets(command_line, 1000, stdin); 
  // Parse command
  int i = 0;
  // get the first command
  args[i] = strtok(command_line, "; \n");

  // parse entire length of command line
  while (args[i] != NULL && i < MAX_ARGS - 1) {
    // collect the redirection characters
    if (strcmp(args[i], ">") == 0 || strcmp(args[i], "1>") == 0 || strcmp(args[i], "2>") == 0) {
      // handle stdout/stderr redirection
      output_file = strtok(NULL, " ");
      //args[i] = NULL;
      in_out = STDOUT_FILENO;
      printf("output_file: %s\n", output_file);
    }
    // also do <1 and <2
    else if (strcmp(args[i-1], "<") == 0){
      in_out = STDIN_FILENO;
    }
    // start from args[1]
    i++;
    // first param must be NULL so strtok "starts splitting the string from the next token's starting position it remembers"
    args[i] = strtok(NULL, "; \n");
  }

  // once all of the commands are collected
  int j = 0;
  while(args[j] != NULL){
    // create a child process for each of the commands in the argument list:
    if (execute_command(args[j], output_file) == -1){
      perror("failed to make child process");
      return -1;
    }
    j++;
    printf("j: %d\n", j);
  }
  return 0;
}


int main(int argc, char *argv[]){
  while(1){
    char function[100] = "";
    printf("myshell> ");
    // get command-line input from myshell
    // gracefully handle signal from ctrl + C
    //if(signal(SIGINT, sig_handler){}
    if (parse_command_line() == -1) {
      printf("Error executing command\n");
    }
  }
  return 0;
}
    // intercepting the SIGINT from ctrl + c
    
